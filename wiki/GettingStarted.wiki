#summary How to get started with installing and understanding the software

= Introduction =

The code for Perl App Engine is completely in its formative stages (pre-alpha)
and changing quickly.  We are trying to keep documentation up to date. Please
let us know if you find an error or discrepancy.

= Background =

Currently, the low level plumbing that will allow a Perl program to access
the available services within the Google compute farm are being implemented.

== protobuf-perl ==

This is done by making calls to an API proxy and passing parameters
which have been serialized using an approach called "protocol buffers."
The "protobuf" tool uses a serialization specification (in a .proto file)
(i.e. like an Interface Definition Language or IDL) and produces
code for Google's main three languages: C++, Java, and Python.
Brad has done work on adding Perl support to the protocol buffers tool set.
This is generically useful (at least to all projects using protocol buffers such
as those within Google's compute farm) and therefore has been made a separate
project.

  * http://code.google.com/p/protobuf/
  * http://code.google.com/apis/protocolbuffers/docs/tutorials.html
  * http://code.google.com/apis/protocolbuffers/docs/reference/other.html
  * http://code.google.com/p/protobuf/wiki/OtherLanguages
  * http://groups.google.com/group/protobuf-perl
  * http://code.google.com/p/protobuf-perl/

== sys-protect ==

Also, the Sys::Protect module is an XS module which eliminates the use of
certain Perl opcodes. This is not how it will be when code
runs at Google, but it will help ensure that code that runs in the development
environment does not contain illegal actions which will not be allowed in the
production environment.

  * http://search.cpan.org/~bradfitz/Sys-Protect/
  * http://search.cpan.org/~bradfitz/Sys-Protect/lib/Sys/Protect.pm

== Moose ==

The project also uses Moose, "a postmodern object system for Perl 5 that
takes the tedium out of writing object-oriented Perl. It borrows all the
best features from Perl 6, CLOS (LISP), Smalltalk, Java, BETA, OCaml, Ruby and more, while still keeping true to it's Perl 5 roots." It also uses Moose::Policy.

  * http://www.iinteractive.com/moose/
  * http://search.cpan.org/~stevan/Moose/
  * http://search.cpan.org/~stevan/Moose/lib/Moose.pm
  * http://search.cpan.org/~stevan/Moose-Policy/
  * http://search.cpan.org/~stevan/Moose-Policy/lib/Moose/Policy.pm

= Getting Started =

Here's how to get started.
I had to install the following modules and their dependencies on my system.
(You may have to install more.)

IMPORTANT: When you install Moose (below) and follow the dependencies, you will
be prompted to install Class::C3::XS. This is the one default you should
*not* choose (i.e. choose "No").  If you miss this, you will need to
uninstall it later.

{{{
   su -   # become root
   perl -MCPAN -e shell
   cpan> install IPC::Run
   cpan> install HTTP::Server::Simple::CGI
   cpan> install Net::Server::Fork
   cpan> install namespace::clean
   cpan> install Moose
   cpan> install Moose::Policy
   cpan> exit
   exit   # become a normal user again
}}}

If you did install the module called Class::C3::XS,
it needs to be uninstalled. I did the following to get rid
of it. You may have to adjust your paths appropriately.

{{{
   su -   # become root
   rm /usr/lib/perl5/site_perl/5.8.8/i686-linux/Class/C3/XS.pm
   rm /usr/lib/perl5/site_perl/5.8.8/i686-linux/auto/Class/C3/XS/XS.bs
   rm /usr/lib/perl5/site_perl/5.8.8/i686-linux/auto/Class/C3/XS/XS.so
   rm /usr/share/man/man3/Class::C3::XS.3pm
   rm /usr/lib/perl5/site_perl/5.8.8/i686-linux/auto/Class/C3/XS/.packlist
   exit   # become a normal user again
}}}

Note: draegtun has suggested that setting the CLASS_MOP_NO_XS environment variable
would make the uninstall of Class::C3::XS unnecessary. I (spadkins) tried this
and was unable to make that work.

Then you check out the existing projects.
(I am assuming you will do this in a HOME directory on a Linux system.)

{{{
   cd $HOME/src
   svn checkout http://sys-protect.googlecode.com/svn/trunk/     sys-protect
   svn checkout http://protobuf-perl.googlecode.com/svn/trunk/   protobuf-perl
   svn checkout http://perl-appengine.googlecode.com/svn/trunk/  perl-appengine
}}}

Then do the initial compilation. (Do this once.)
Note: These do not need to be installed via "make install" as the
perl-appengine dev kit includes relative paths to the appropriate directories.

{{{
   cd $HOME/src/sys-protect
   perl Makefile.PL
   make
}}}

Then do the following to update and compile. (Do this regularly to
keep up to date.)

{{{
   cd $HOME/src/sys-protect
   svn update
   perl Makefile.PL
   make

   cd $HOME/src/protobuf-perl
   svn update

   cd $HOME/src/perl-appengine
   svn update
}}}

= Running the Development Server =

The code currently checked in to the perl-appengine subversion repository is
targeted to be the development kit. To demonstrate what it can currently do,
type the following.

{{{
   cd $HOME/src/perl-appengine
   dev_appserver.pl demos/prototest
}}}

The server output was as follows.

{{{
 2008/07/28-22:52:38 AppEngine::Server::NetServer0 (type Net::Server::Fork) starting! pid(14736)
 Binding to TCP port 9000 on host *
 Group Not Defined.  Defaulting to EGID '205 3000 217 10 205'
 User Not Defined.  Defaulting to EUID '102'
}}}

Then I went to lynx to access the test page.

{{{
   lynx localhost:9000
}}}

= What's Going On =

... to be written ...